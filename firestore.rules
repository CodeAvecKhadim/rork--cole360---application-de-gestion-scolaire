// Règles Firestore pour École 360 - Version sécurisée
// IMPORTANT: Copiez ces règles dans votre console Firebase pour corriger les erreurs de permissions
// 
// ÉTAPES POUR METTRE À JOUR LES RÈGLES:
// 1. Allez sur https://console.firebase.google.com
// 2. Sélectionnez votre projet
// 3. Allez dans "Firestore Database" > "Règles"
// 4. Remplacez tout le contenu par les règles ci-dessous
// 5. Cliquez sur "Publier"

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Collection users - Gestion des profils utilisateurs
    match /users/{userId} {
      // L'utilisateur peut lire et modifier son propre profil
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Les admins peuvent lire tous les profils
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Collection ecoles - Gestion des écoles
    match /ecoles/{ecoleId} {
      // Seuls les admins peuvent créer, modifier et supprimer des écoles
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Les profs et parents peuvent lire les écoles auxquelles ils sont associés
      allow read: if request.auth != null;
    }
    
    // Collection classes - Gestion des classes
    match /classes/{classeId} {
      // Les admins ont accès complet
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Les profs peuvent lire et modifier leurs classes
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'prof' &&
        request.auth.uid in resource.data.professeurs;
      // Les parents peuvent lire les classes de leurs enfants
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent';
    }
    
    // Collection eleves - Gestion des élèves
    match /eleves/{eleveId} {
      // Les admins ont accès complet
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Les profs peuvent lire et modifier les élèves de leurs classes
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'prof';
      // Les parents peuvent lire les données de leurs enfants
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent' &&
        request.auth.uid in resource.data.parents;
    }
    
    // Collection cours - Gestion des matières/cours
    match /cours/{coursId} {
      // Les admins peuvent créer, modifier et supprimer des cours
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Tous les utilisateurs authentifiés peuvent lire les cours
      allow read: if request.auth != null;
    }
    
    // Collection notes - Gestion des notes
    match /notes/{noteId} {
      // Les admins ont accès complet
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Les profs peuvent créer et modifier les notes de leurs élèves
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'prof' &&
        request.auth.uid == resource.data.professeur_id;
      // Les parents peuvent lire les notes de leurs enfants
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent';
    }
    
    // Collection messages - Gestion de la messagerie
    match /messages/{messageId} {
      // Les utilisateurs peuvent lire les messages qui leur sont destinés ou qu'ils ont envoyés
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.expediteur_id || 
         request.auth.uid == resource.data.destinataire_id);
      // Les utilisateurs peuvent créer des messages
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.expediteur_id;
      // Seul l'expéditeur peut modifier son message (pour marquer comme lu par exemple)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.expediteur_id;
    }
    
    // Collection locations - Gestion du suivi de géolocalisation
    match /locations/{locationId} {
      // Les admins ont accès complet
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Les profs peuvent lire les positions des élèves de leurs classes
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'prof';
      // Les parents peuvent lire les positions de leurs enfants
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent' &&
        request.auth.uid in get(/databases/$(database)/documents/eleves/$(resource.data.eleve_id)).data.parents;
      // Les élèves (via l'app) peuvent créer leurs propres données de localisation
      allow create: if request.auth != null;
    }
    
    // Collection subscriptions - Gestion des abonnements
    match /subscriptions/{subscriptionId} {
      // Les utilisateurs authentifiés peuvent lire et modifier leurs propres abonnements
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      // Permettre la création d'abonnement par l'utilisateur authentifié
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Les admins ont accès complet
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Collection payments - Gestion des paiements
    match /payments/{paymentId} {
      // Les admins ont accès complet
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Les utilisateurs peuvent lire et créer leurs propres paiements
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Permettre la création de paiement par l'utilisateur
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Permettre la mise à jour du statut de paiement
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Collection payment_transactions - Gestion des transactions de paiement
    match /payment_transactions/{transactionId} {
      // Les utilisateurs authentifiés peuvent lire et modifier leurs propres transactions
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      // Permettre la création de transaction par l'utilisateur authentifié
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Les admins ont accès complet
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Règle par défaut - Refuser tout accès non spécifié
    match /{document=**} {
      allow read, write: if false;
    }
  }
}